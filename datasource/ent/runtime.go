// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/renoinn/bookmark-go/datasource/ent/bookmark"
	"github.com/renoinn/bookmark-go/datasource/ent/schema"
	"github.com/renoinn/bookmark-go/datasource/ent/tag"
	"github.com/renoinn/bookmark-go/datasource/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookmarkFields := schema.Bookmark{}.Fields()
	_ = bookmarkFields
	// bookmarkDescURL is the schema descriptor for url field.
	bookmarkDescURL := bookmarkFields[1].Descriptor()
	// bookmark.URLValidator is a validator for the "url" field. It is called by the builders before save.
	bookmark.URLValidator = func() func(string) error {
		validators := bookmarkDescURL.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(url string) error {
			for _, fn := range fns {
				if err := fn(url); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bookmarkDescTitle is the schema descriptor for title field.
	bookmarkDescTitle := bookmarkFields[2].Descriptor()
	// bookmark.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	bookmark.TitleValidator = func() func(string) error {
		validators := bookmarkDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bookmarkDescNote is the schema descriptor for note field.
	bookmarkDescNote := bookmarkFields[3].Descriptor()
	// bookmark.NoteValidator is a validator for the "note" field. It is called by the builders before save.
	bookmark.NoteValidator = bookmarkDescNote.Validators[0].(func(string) error)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[1].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = tagDescName.Validators[0].(func(string) error)
	// tagDescCount is the schema descriptor for count field.
	tagDescCount := tagFields[2].Descriptor()
	// tag.DefaultCount holds the default value on creation for the count field.
	tag.DefaultCount = tagDescCount.Default.(int)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
